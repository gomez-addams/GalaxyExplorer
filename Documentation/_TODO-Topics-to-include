
# CoreSystems

CoreSystems is a scene that we load that has most of our global game objects.
Things like our audio rig (which has our background music and VOManager) and
things like our Input stack. CoreSystems is loaded into any scene via
Layers so that developers and artists can run any scene (e.g.
SunView.unity) independent from running the MainScene. 

# ViewLoader

The ViewLoader manages the loading of scenes used throughout the app. 
The Viewloader lives inside CoreSystems scene.
It is responsible to load and unload scenes.
Scenes are loaded asynchronously
TransitionManager calls Viewloader in order to load and unload scenes.
All the rest of the script just hook up on ViewLoader's callbacks in order
to know when a new scene is about to be loaded and when that has been completed.

ViewLoader keeps the trail of scenes in a stack in order to know in which scene to go back.
Scenes during Introduction flow should not go in this stack as user never goes back to introduction flow.

# GalaxyExplorerManager

Its the main component of the app.
It decides in which platform the app is running.
It holds references in many other managers of the scene in order for other components
to access them through GalaxyExplorerManager
It also holds properties that are different per platform that other components in the
app use.

# IntroductionFlow

Flow of introduction is managed by FlowManager and IntroFlow.cs
IntroFlow.cs lives in MainScene. In that way, in order for introduction to play, 
user need to run the main scene and it doesnt run when running any other scene.

IntroFlow.cs activates FlowManager in CoreSystems scene.
FlowManager has all the dinstict stages of the introduction flow, from Logo appearance until 
the first scene that user can interact with, the galaxy view.

* Logo
* Sfx
* VO
* Earth pin
* Solar System view
* Galaxy view 

The IntroFlow.cs just helps out FlowManager in functionality that cant be just hooked up in editor in FloManager

When the GalaxyView scene is loaded which is the first scene that user can interact with, then thats the end of introduction.

# Tools

The Tools are contained in a ToolPanel, which manages the visibility of the
Back, Grab, Reset, About, and Controls UI elements. 
The ToolPanel.cs has the functionality to move the tools and implements is as the tag-along functionality.

In the ToolPanel, there are Buttons (Back, Grab, Reset, About, and Controls). 
The buttons perform an action on selection, and tools enter a toggle state. 
The ToolPanel can be raised or lowered through the manager. 

The ToolManager handles the Button settings that can be called from anywhere in script. 

All UI Buttons are in UI physics layer, in order to be able to have sfx from Audui

The tools appear in HoloLens and MR platfroms.
In Desktop, there are unity buttons on the right corner of the screen.
The buttons are Reset and About.

# PointOfInterest

PointOfInterests (POIs) are markers in scene.
They are represented in the application by a line and an indicator on the top.

Parts of a PointOfInterest:

* BillboardLine - the line that connects the interest point to interact with to an indicator at the top of the line. The line is always vertical and scales with distance as a UI element. It does not rescale with content and will always start at a target point.
* Indicator - the card that is shown above the BillboardLine.
* Card Description - a text card that appears when user focuses on the poi.

POIs have different size in different platforms.
PoiResizer.cs is the script that updates the scale of the poi elements depending on platform.

## OrbitScalePointOfInterest

Is a toggle that converts between Realistic and Simplified orbit and size views
in the solar system.

## CardPOI

Is used in the galaxy to inspect images through a magic window. Parallax for
the window and settings are incorporated in the POI_Porthole shader, and the
window depth is hidden with the POI_Occlusion shader. 
The magic window lives under the POI in the hierarchy. The CardPOI.cs is responsible 
to place the magic window at the desired position and rotation.

The font used in the PointOfInterest cards is called "Orbitron" and it can be found
[here](https://www.theleagueofmoveabletype.com/orbitron). As this font is released
under the [SIL Open Font License](http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL_web), 
developers who are interested in creating or modifying PointOfInterest cards should
treat it like any other third-party dependency and install the font on their own
development system rather than committing it directly into the git repository.

## PlanetPOI

Is used in solar system and galactic center.
Its the poi that when selected, it results in entering in a new scene.
The scene that it loads is set in PlanetPOI in editor.
The planet object lives along the poi under the same parent.
There is a reference to the planet from the poi.
The planets have a collider wich is around the mesh which is needed to be exactly as the mesh
as these colliders are used during transitions to new scenes.
Planets have an extra wider collider which is arond the planet and its much larger than the planet.
Its purpose is to be able for the planet to be selected, as the collider that its exactly around its mesh, 
might be small, a larger collider, gives the ability to select the planet easier.

## GE_POIMaker Tool

The GE_POIMaker tool can be used to help create new point of interest billboard
image files quickly and easily. This tool is located as a seperate project
within the solution. It can create one-off POI billboard .png files or batch
create all POI files when necessary. The current POI files included within 
GalaxyExplorer were generated with this tool's default settings.

The GE_POIMaker can also be used to experiment with colors, font sizes and other
effects by clicking the "Show advanced controls" checkbox. Please consult the
tooltips on each control for help on that specific control.

The GE_POIMaker tool references the Orbitron font, but will use a default font
if Orbitron is not installed on the development system.

# TransformSource

Every scene that is spawned need to be at the same place as the previous one.
In order to keep consecutive scenes in same position, rotation, scale, 
we use TransformSource and TransformHanlde.
There is only one TransformSource in CoreSystems with an ID.
Every scene needs to have a TransformHandle with the matching id of TransformSource.
TransformSource position, rotation and scale are synched with the transform in TransformHandle.
In this way, all scenes, have the same transform values.

# SceneTransition

Every scene needs to have a SceneTransition component on the top entity of the scene.
All other gameobjects need to live under this entity.

This is necessary for the transitions from an old scene to the new one.
This component is aware of the size of the scene as it has a reference
to a collider named EntireSceneCollider and its aware of the focus collider
of this scene. The focus collider is useful in the transition from one scene into the other.
It also has a reference to SceneObject which is the entity that its transform is updated
during transitions. This is the child of the SceneTransition object and needs to have an
identity transform. All gameobjects of the scene need to be under this or they wont be moved
along during transition.
Its important to set the IsSinglePlanet bool property to true if the scene is a single planet.
This is also used during transition to a new scene.

# TransitionManager

Each view (galaxy, solar system, each planet, and the sun) is a scene in Unity.
The ViewLoader handles loading these scenes and the TransitionManager manages
how flow moves from an old scene to a new scene through callbacks from the
ViewLoader. This system handles the animations that are run between scenes to
easily flow between scenes.

First, components that arent needed are disabled, like the OrbitUpdater, POIRotation animation, 
PointOfInterests, Touchscript. All these, are components that move the gameobjects in the scene and during
transition to a new scene, nothing should move the objects except the transition code.

Next we need to scale the new scene to fill the given percentage of the global volume.
The global volume is the one set in the transform of TransformSource.
Its scene fills a percentage of this. The percentage is set in editor in SceneTransition component.

Next is initialization of zoom in out functionality.
At this step the properties for start and end position, rotation, scale are set and after this
position, rotation and scale of the scene objects should not change from other functionality other
than zoom in out code.

Next all colliders of old and new scene needs to be deactivated so user cant interact with them during transition.

Next, the pois of previous scene fades out, and when that is done, the whole previous scene starts fading out.
The audio transition plays.
The new scene's pois alpha is set to zero so there arent visible
The new scene fades in except its pois
Then, the zoom in out transition starts.
When that is over, the previous scene unloads, 
the new scene's pois fade in and its colliders are being active again.

The transition code is in ZoomInOut.cs

Scenes have focus colliders. For example, solar system scene has as focus collider the sun planet collider.
A single planet scene, will have that collider as focus collider.
The idea is, that the previous and new scene's focus colliders are being transitioned from one into the other.

For example, going from solar system into earth view. The new scene, earth view, will initially be scaled, positioned and rotated
in a way so its focus collider will match exactly the transform of the earth focus collider in solar system view.
The transition code will update both scenes in that way so both focus colliders have matching transforms at any point until
the end of the transition. At the end of the transition, the new scene will have the transform values that it had when it was spawned.
So, the old and new scenes, are being modified, to transition from the previous scene's focus collider transform into the 
next scene's focus collider transform.

ZoomInOut.cs implements the above transition.
Need to take into account any rotation between top parent scene entity and focus collider and any translation.
Need to rotate the scenes around the focus objects as pivots.
Need to scale the scenes around the focus objects as pivots.
So, it takes these into consideration during rotation and scale.

# Fader

Faders control the transition alpha for any materials that use shaders
supporting _TransitionAlpha. Each Fader is responsible for changing the blend
settings of material shaders for alpha blending and returning them to their
original states when fading completes.

GEFadeManager has all required functionality for fading.

There are few differents faders, all inherit from the base Fader.

## MaterialsFader

Has all of its materials defined in the UnityEditor instead of trying to figure
out which materials to fade through renderers. You can use this for batch
rendering or to fade a group of objects together without needing to collect a
list of faders for better performance.
This is used in Tools in order to fade in/out all the materials related to Tools menu.
Its also used in solar system and galactic center to have a list of materials that are used in the scene
as orbit trail material.

## POIMaterialFader

Its a list of materials specifically for pois, in order to fade in/out all together.
There is a separate fade script for pois in order to be able to fade just that fader 

## SpiralGalaxyFader

Its a fader specifically for the milky way in Galaxy view.

## SunLensFlareSetter

Specifies a single material in the UnityEditor to integrate _TransitionAlpha
settings with other shader-dependent values for lens flare.

# VOManager

VOManager is used to control how voice over clips are played and stopped. The
voice over content is broken up based on where we are in the flow of the
experience and requires a central control to ensure that it flows as desired. 

Playing a voice over clip will enter that clip into a queue to be played in a
first in, first out order. Individual clips can have their own delay from: when
they're queued up to play, to when they actually play. By default, clips will
only be played once, even if Play is called with that specific clip again.
However, each clip has the option to play more than once which is exposed
publicly.

Stopping the playing audio will fade out what's currently playing over a user
tweakable fadeout time. Stopping also has the option to clear the queue of all
clips if the user wants to start a new sequence of voice audio.

Lastly, voice over audio can be disabled and enabled globally by setting the VO
state to false, fading out any audio currently playing and clearing the queue
of clips waiting to be played.

VOManager works best when it exists in a persistent system.
Its only requirement is that an AudioSource is placed on the same object.
Fade out time can me tweaked in editor.

# MusicManager

Musicmanager lives in CoreSystems. 
Its responsible for background music in its scene.

# Audui

Sfx are being handled through Audui.
So, sfx in pois, magic windows and tools menu buttons are handled with AuduiCustomSound.
AuduiEventWrangler has the default sound events.
Its entity that wants to override these sounds need to have along its collider a AuduiCustomSound component.
Note that Audui workd with entities in UI physics layer only.

# WorldAnchorHandler

WorldAnchors are Unity components that create Windows Volumetric Spatial
Anchors at a defined real world transform in space. The WorldAnchorHandler
class wraps up all of the calls to create and maintain the WorldAnchor that
defines the position where the galaxy is placed as part of the introduction
process.

# Touchscript

Its a unity free asset that handles user touches on screen and interpretes them
into translation, rotation, scale.

# Input

There are multiple user inputs.
Input in HoloLens and MR is handled by MRTK.
In desktop there is GEMouseInputSource, GEKeyboardInputSource and GETouchScreenInputSource
Each one of these inherit from MRTK's BaseInputSource.
They override InputManager. Instance. OverrideFocusedObject when necessary as InputManager of MRTK
has as focused object the one focused by the cursor.
In mouse, keyboard and touch case those thats not valid.

# Shaders

## Galaxy

The galaxy is using a geometry shader to expend a particle system into screen
aligned quads.

## Magic Window - POI_Porthole

Because the Galaxy renders in several passes, we didn't want to have other
passes for the background and have to manually clip them. Instead, we have a
texture for the background and we tweak the UV depending on the direction to
the camera to create a parallax effect. Essentially, we do an intersection test
between the ray to the camera to the plane where we want the virtual image to
be at, and shift the UV coordinates based on that.

## Solar System Orbits - OrbitalTrail

The orbits lines are screen space lines expanded with a geometry shader. Each
vertex have 2 positions: one for the real scale view and one for the schematic
view. The vertex shader then interpolates between those 2 positions to compute
the final position according the a reality scale that moves between 0 and 1 and
then pass it to a geometry shader that generates correctly triangulated lines
in screen space. This makes the orbits have a fixed width on screen no matter
what scale the solar system is being viewed at.

## Earth - PlanetShaderEarth

Like all the planets, most parameters are evaluated in the vertex shader as we
have a high poly version of each planet. The light is computed with a N. L
contribution that we gamma correct in order to have a realistic looking light
transition from the dark side to the light side. We also have in the alpha
channel of the Albedo texture a map of the night lights from NASA photographs
that we use to illuminate the dark side of the planet. You might notice that
there are lights in the middle of Australia … which are actually wildfires
that can be seen from space.

## Saturn - PlanetShaderSaturn

In the experience we don't have dynamic shadows enabled - as they are mostly
irrelevant for our scene - except for Saturn. The rings shadow pattern always
plays a big part of the aesthetic look of the planet, so we spent some time
making analytic shadows for it. The logic behind is to project a sphere on a
plane perpendicular to the direction to the light (the sun is approximated as
a directional light) and checking if the resulting pixel is inside of the
shadow or not. For the shadow of the planet on the rings, the world space
position of the pixel on the ring is compared to the radius of the planet
when projected on the plane that contains the pixel. For the shadow of the
rings of the planet, we project the world space position of the pixel on the
planet into the rings plane, and we compare its distance to the center of the
planet to the distance to the inner ring radius and outer ring radius. The
result gives a value in [0-1] which is used to sample a shadow texture.

## Performance Investigation

During the development process, we used various tools to investigate possible
performance optimization in our rendering tasks.

* Unity Profiler - Integrated with Unity, it gives a good overview where time is spent on the CPU and how many elements are being drawn on the screen.
* Unity's shader "compile and show code" - It shows the shader assembly and gives an idea on how expensive the shaders will be once being executed on device. A rule of thumb is that lower instructions count especially in the pixel/fragment shader is better.
* Visual Studio Graphics Debugger - Very powerful tool that gives timing on both the CPU and GPU side, can analyze shader performance and reveal hot code path on the CPU
* GPU View (Integrated with Visual Studio Graphics Debugger) - Gives precise timing on the GPU and CPU workload on device. Best used to determine if the experience is GPU bound or CPU bound.

